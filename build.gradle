group 'codeOrchestra.colt'
version VERSION
apply plugin: 'idea'
apply from: 'http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies { classpath 'org.ajoberstar:gradle-git:1.2.0' }
}
allprojects {
    apply plugin: 'groovy'
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        compile 'org.codehaus.groovy:groovy-all:2.4.6'
        compile ('com.googlecode.apparat:apparat-core:1.0-RC9') { transitive = false }
        compile ('com.googlecode.apparat:apparat-log:1.0-RC9') { transitive = false }
        compile 'com.github.briandilley.jsonrpc4j:jsonrpc4j:1.1'
        compile 'org.apache.ant:ant:1.9.6'
        compile 'commons-codec:commons-codec:1.10'
        compile 'org.controlsfx:controlsfx:8.0.2'
        compile 'org.mortbay.jetty:jetty:6.1.26'
        compile 'org.mortbay.jetty:jetty-util:6.1.26'
        compile 'net.java.openjfx.backport:openjfx-78-backport:1.8.0-ea-b96.1'
        compile 'javax.portlet:portlet-api:2.0'
        compile 'org.slf4j:slf4j-api:1.7.12'
        compile 'org.slf4j:slf4j-simple:1.7.12'
        compile 'net.lingala.zip4j:zip4j:1.3.2'
        compile 'javax.jmdns:jmdns:3.4.1'
        compile 'org.ow2.asm:asm:5.0.4'
        compile 'org.scala-lang:scala-library:2.8.0'
    }
}
subprojects {
    sourceSets {
        main {
            java { srcDirs = [] }
            groovy { srcDirs += ["src/main/java"] }
        }
        test {
            java { srcDirs = [] }
            groovy { srcDirs += ["src/test/java"] }
        }
    }
    compileJava {
        options.fork = true
        options.forkOptions.executable = "$JDK_HOME/bin/javac"
        options.encoding = 'UTF-8'
        options.incremental = true
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

project('colt-updater') {
    apply plugin: 'java'
    compileGroovy.enabled = false;
    sourceSets {
        main {
            java { srcDirs = ["src/main/java"] }
            groovy { srcDirs = [] }
        }
    }
}
project('colt-as') {
    dependencies {
        compile fileTree(dir: "${project(":colt-core").projectDir.path}/lib", include: '*.jar')
        compile project(':colt-core')
    }
}
project('colt-core') {
    dependencies {
        compile fileTree(dir: 'lib', include: '*.jar')
    }
}

task cloneModules << {
    def dir = project(":colt-as").projectDir
    if(!dir.exists() || !file("$dir.path/.git").exists()) {
        dir.deleteDir()
        org.ajoberstar.grgit.Grgit.clone(dir: dir, uri: COLT_AS_GIT)
    }
    dir = project(":colt-core").projectDir
    if(!dir.exists() || !file("$dir.path/.git").exists()) {
        dir.deleteDir()
        org.ajoberstar.grgit.Grgit.clone(dir: dir, uri: COLT_CORE_GIT)
    }
    dir = file("../livecoding_examples")
    if(!dir.exists() || !file("$dir.path/.git").exists()) {
        dir.deleteDir()
        org.ajoberstar.grgit.Grgit.clone(dir: dir, uri: LIVECODING_EXAMPLES)
    }
    if(FLEX_SDK_LIVECODING_GIT != "") {
        dir = file("../flex-sdk-livecoding")
        if(!dir.exists() || !file("$dir.path/.git").exists()) {
            dir.deleteDir()
            org.ajoberstar.grgit.Grgit.clone(dir: dir, uri: FLEX_SDK_LIVECODING_GIT)
        }
    }
}

task preBuild(dependsOn: 'cloneModules', type: Copy) {
    def coltas = project(":colt-as").projectDir.path
    def out = "$projectDir.path/src/deploy/resources"
    copy {
        from "$coltas/lib/colt.swc"
        into "$out/lib"
    }
    copy {
        from "$coltas/crossdomain.xml"
        into out
    }
    file("$out/templates").deleteDir()
    copy {
        from "$coltas/templates"
        into "$out/templates"
        exclude "*.sh"
    }
    file("$out/projects").deleteDir()
    copy {
        from fileTree(dir: "../livecoding_examples/as")
        into "$out/projects"
    }
}
task postBuild(type: Copy) {
    if(FLEX_SDK_HOME != "") {
        def out = "$projectDir.path/build/distributions/colt/app/flex_sdk"
        //TODO slavara: check date
        if(!file(out).exists() || file(out).list().length == 0) {
            copy {
                from fileTree(dir: FLEX_SDK_HOME)
                into out
            }
        }
        def dir = file("../flex-sdk-livecoding/lib")
        if(dir.exists()) {
            copy {
                from fileTree(dir: dir.path)
                into "$out/liblc"
            }
        }
    }
}

javafx {
    appID 'COLTApp'
    appName 'COLT'
    mainClass 'codeOrchestra.colt.core.ui.ColtApplication'
    jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    systemProperties = ['prism.disableRegionCaching':'true']
    arguments = ['-l', '--fast']
    embedLauncher = true
    vendor = 'CodeOrchestra'
    description = 'COLT is a small program to test and build mobile, web and desktop-based applications in real time.'
    copyright = 'Â© 2012-2016. All rights reserved'
    signingMode 'release'
    codebase = 'https://github.com/code-orchestra'
    installSystemWide = false
    menu = true
    shortcut = true
    icons {
        shortcut = ['colt-32.png', 'colt-64.png'/*, 'colt-128.png', 'colt-256.png', 'colt-512.png'*/]
        volume = 'colt-64.png'
        setup = 'colt-64.png'
    }
    profiles {
        windows {
            category = 'CodeOrchestra'
            javaRuntime = JDK_HOME
        }
    }
}

cssToBin { enabled = false }

dependencies {
    runtime project(":colt-core")
    runtime project(":colt-as")
    runtime project(":colt-updater")
}

compileJava.dependsOn 'preBuild', ':colt-core:build', ':colt-as:build', ':colt-updater:build'
assemble.dependsOn 'postBuild'
